import numpy as np
import glob
from os.path import basename
import sys

def matrix_factorization(R, P, Q, K, steps=20000, alpha=0.0001, beta=0.01):
    Q = Q.T
    P2 = P.copy()
    Q2 = Q.copy()
    s = steps
    for step in range(steps):
        s = step
        for i in range(len(R)):
            for j in range(len(R[i])):
                #if R[i][j] > 0:
                eij = R[i][j] - np.dot(P2[i,:],Q2[:,j])
                for k in range(K):
                    if(P[i][k] == 0.0001):
                        P2[i][k] = P2[i][k] + alpha * (2 * eij * Q2[k][j] - beta * P2[i][k])
                    if(Q[k][j] == 0.0001):
                        Q2[k][j] = Q2[k][j] + alpha * (2 * eij * P2[i][k] - beta * Q2[k][j])

        e = 0
        for i in range(len(R)):
            for j in range(len(R[i])):
                #if R[i][j] > 0:
                e = e + pow(R[i][j] - np.dot(P2[i,:],Q2[:,j]), 2)
                for k in range(K):
                    e = e + (beta/2) * ( pow(P2[i][k],2) + pow(Q2[k][j],2) )
        print(e)
        if e < 0.0001:
            break
    print("Number of steps: ",s)
    return P2, Q2.T

R = []
P = []
Q = []

def read_mf_mat(quarter):
    print('Processing: '+quarter)

    with open(quarter+".txt") as f:
        R = np.loadtxt(f)
        print(R.shape)
        f.close()

    print(R)

    with open(quarter+"_p.txt") as f:
        P = np.loadtxt(f)
        print(P.shape)
        f.close()

    with open(quarter+"_q.txt") as f:
        Q = np.loadtxt(f)
        print(Q.shape)
        f.close()

    U, V = matrix_factorization(R, P, Q, 4)


    print('Completed matrix factorization', U , V)

    X = np.dot(U, V.T)

    print('Generated by matrix factorization', X)


    np.savetxt(quarter+'_u.txt', U, fmt='%.3f')

    np.savetxt(quarter+'_v.txt', V, fmt='%.3f')

    print('Completed processing: '+quarter)

read_mf_mat('c:/mf/m')
